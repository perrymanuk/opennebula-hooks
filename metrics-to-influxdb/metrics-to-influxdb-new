#!/usr/bin/python
from ConfigParser import SafeConfigParser
import xmlrpclib
import urllib2
import urllib
from xml.etree import ElementTree
import xml.etree.ElementTree as ET
import logging
import requests
import subprocess
import sys
from socket import gethostname
from requests.auth import HTTPBasicAuth
from ConfigParser import SafeConfigParser
import time

parser = SafeConfigParser()
try:
   parser.read("/usr/local/etc/influxdb.conf")
   host = parser.get("db", "host")
   database = parser.get("db", "database")
   username = parser.get("auth", "username")
   password = parser.get("auth", "password")
   instance = parser.get("cloud","instance")
except:
   print "Unable to read from config file"
   sys.exit(1)

influx_url = "http://"+host+"/write?db="+database

with open("userauth","r") as authfile:
	auth_string = authfile.read().replace("\n","")

hostname = "dev-hn1.nubes.rl.ac.uk"
server = xmlrpclib.ServerProxy("https://"+hostname+"/RPC2")
response = server.one.user.login(auth_string, "testgroup", "dontleaveblank", 1000)
session_id = response[1]
one_auth = "testgroup:" + session_id

def get_vm_pool():
	vm_xml = server.one.vmpool.info(one_auth, -1, -1, -1, 3)[1]
	vm_pool = ET.fromstring(vm_xml)

	return vm_pool 

template_xml = server.one.templatepool.info(one_auth, -1, -1, -1)[1]
template_pool = ET.fromstring(template_xml)

user_xml = server.one.user.info(one_auth, -1)[1]
user_pool = ET.fromstring(user_xml)

def delete_vm(vm_id):
	delete = server.one.vm.action(one_auth, "delete", vm_id)[0]

	if delete:
		print time.ctime() + ": VM " + str(vm_id) + " successfully deleted"
	else: 	
		print time.ctime() + ": Unable to delete " + str(vm_id)

def get_average_ping(ip):
	print time.ctime() + ": Pinging..."
	ping = subprocess.Popen(["fping", "-c", "3", ip], stdout=subprocess.PIPE)
	out = ping.communicate() 
	avg_ping = out[0][35:37]
	
	return str(avg_ping)

def get_vm_ip(vm_id):
	time.sleep(20)
	vm_pool = get_vm_pool()
	for vm in vm_pool.findall("VM"):
		if vm_id == int(vm.find("ID").text):
			ip = vm.find("TEMPLATE/NIC/IP").text
		else:
			ip = "unknown"
	
	print "IP is " + str(ip)
	return ip
				
def ssh_touch(ip):
	print time.ctime() + ": SSHing..."
	start = time.time()
	command = subprocess.call(["ssh", "testgroup@" + str(ip), "touch", "testfile"])
	elapsed = str(time.time() - start)[0:4]

	return elapsed

def send_to_influxdb(value, data_title, ip, template_id, template_name):
	print time.ctime() + ": Sending to influxdb..."
	request = requests.post(influx_url, data_title + ",ip=" + ip + ",template_id=" + str(template_id) + ",template_name=" + template_name + " value=" + value, auth=(username,password))

def instantiate_vm(template_id, template_name):
	print time.ctime() + ": Creating template " + template_id + " for " + template_name
	instantiate = server.one.template.instantiate(one_auth, int(template_id), template_id + "-" + template_name, False, "")
	status = instantiate[0]
	vm_id = instantiate[1]
	error_code = instantiate[2]

	return status, vm_id, error_code

def run(): 
	if int(user_pool.find("VM_QUOTA/VM/VMS_USED").text) >= 3:
		print time.ctime() + ": \033[0;31mVM limit reached, can't instantiate\033[1;m"
	else: 
		for vm_template in template_pool.findall("VMTEMPLATE"):
			template_id = vm_template.find("ID").text
			template_name = vm_template.find("NAME").text  
			status, vm_id, error_code = instantiate_vm(template_id, template_name)
			
			if status:
				print time.ctime() + ": \033[0;32mSuccessfully created VM with name \"" + template_id + "-" + template_name + "\033[1;m"
				print time.ctime() + ": Waiting for VM..."
				time.sleep(240) 
				ip = get_vm_ip(vm_id)
				ping = get_average_ping(ip)
				ssh = ssh_touch(ip)
				
				send_to_influxdb(ping, "time_to_pingable", ip, template_id, template_name) 
				send_to_influxdb(ssh, "time_to_sshable", ip, template_id, template_name)

				delete_vm(vm_id)
				time.sleep(10) 
			else:
				print time.ctime() + ": \033[0;31mCouldn't create template " + template_id + "(error " + str(error_code) + "\033[1;m"
				print time.ctime() + ": \033[0;31m" + vm_id + "\033[1;m"

run()
